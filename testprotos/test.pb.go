// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: test.proto

package test_proto

import (
	context "context"
	any "github.com/golang/protobuf/ptypes/any"
	duration "github.com/golang/protobuf/ptypes/duration"
	_struct "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type User_Source int32

const (
	User_UNKNOWN User_Source = 0
	User_SOURCE1 User_Source = 1
	User_SOURCE2 User_Source = 2
	User_SOURCE3 User_Source = 3
)

// Enum value maps for User_Source.
var (
	User_Source_name = map[int32]string{
		0: "UNKNOWN",
		1: "SOURCE1",
		2: "SOURCE2",
		3: "SOURCE3",
	}
	User_Source_value = map[string]int32{
		"UNKNOWN": 0,
		"SOURCE1": 1,
		"SOURCE2": 2,
		"SOURCE3": 3,
	}
)

func (x User_Source) Enum() *User_Source {
	p := new(User_Source)
	*p = x
	return p
}

func (x User_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (User_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_test_proto_enumTypes[0].Descriptor()
}

func (User_Source) Type() protoreflect.EnumType {
	return &file_test_proto_enumTypes[0]
}

func (x User_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use User_Source.Descriptor instead.
func (User_Source) EnumDescriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0, 0}
}

type M1_EnumM1 int32

const (
	M1_NULL   M1_EnumM1 = 0
	M1_FIRST  M1_EnumM1 = 1
	M1_SECOND M1_EnumM1 = 2
)

// Enum value maps for M1_EnumM1.
var (
	M1_EnumM1_name = map[int32]string{
		0: "NULL",
		1: "FIRST",
		2: "SECOND",
	}
	M1_EnumM1_value = map[string]int32{
		"NULL":   0,
		"FIRST":  1,
		"SECOND": 2,
	}
)

func (x M1_EnumM1) Enum() *M1_EnumM1 {
	p := new(M1_EnumM1)
	*p = x
	return p
}

func (x M1_EnumM1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (M1_EnumM1) Descriptor() protoreflect.EnumDescriptor {
	return file_test_proto_enumTypes[1].Descriptor()
}

func (M1_EnumM1) Type() protoreflect.EnumType {
	return &file_test_proto_enumTypes[1]
}

func (x M1_EnumM1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use M1_EnumM1.Descriptor instead.
func (M1_EnumM1) EnumDescriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{1, 0}
}

type M1_NestedM1_NestedM2_NestedEnum int32

const (
	M1_NestedM1_NestedM2_A M1_NestedM1_NestedM2_NestedEnum = 0
	M1_NestedM1_NestedM2_B M1_NestedM1_NestedM2_NestedEnum = 1
	M1_NestedM1_NestedM2_C M1_NestedM1_NestedM2_NestedEnum = 2
)

// Enum value maps for M1_NestedM1_NestedM2_NestedEnum.
var (
	M1_NestedM1_NestedM2_NestedEnum_name = map[int32]string{
		0: "A",
		1: "B",
		2: "C",
	}
	M1_NestedM1_NestedM2_NestedEnum_value = map[string]int32{
		"A": 0,
		"B": 1,
		"C": 2,
	}
)

func (x M1_NestedM1_NestedM2_NestedEnum) Enum() *M1_NestedM1_NestedM2_NestedEnum {
	p := new(M1_NestedM1_NestedM2_NestedEnum)
	*p = x
	return p
}

func (x M1_NestedM1_NestedM2_NestedEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (M1_NestedM1_NestedM2_NestedEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_test_proto_enumTypes[2].Descriptor()
}

func (M1_NestedM1_NestedM2_NestedEnum) Type() protoreflect.EnumType {
	return &file_test_proto_enumTypes[2]
}

func (x M1_NestedM1_NestedM2_NestedEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use M1_NestedM1_NestedM2_NestedEnum.Descriptor instead.
func (M1_NestedM1_NestedM2_NestedEnum) EnumDescriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{1, 0, 0, 0}
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string                            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status             bool                              `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Age                uint32                            `protobuf:"varint,4,opt,name=age,proto3" json:"age,omitempty"`
	Flag               []uint32                          `protobuf:"varint,5,rep,packed,name=flag,proto3" json:"flag,omitempty"`
	RepeatedNestedEnum []M1_NestedM1_NestedM2_NestedEnum `protobuf:"varint,6,rep,packed,name=repeated_nested_enum,json=repeatedNestedEnum,proto3,enum=test.proto.v1.M1_NestedM1_NestedM2_NestedEnum" json:"repeated_nested_enum,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *User) GetAge() uint32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *User) GetFlag() []uint32 {
	if x != nil {
		return x.Flag
	}
	return nil
}

func (x *User) GetRepeatedNestedEnum() []M1_NestedM1_NestedM2_NestedEnum {
	if x != nil {
		return x.RepeatedNestedEnum
	}
	return nil
}

type M1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntVal            int32                   `protobuf:"varint,1,opt,name=int_val,json=intVal,proto3" json:"int_val,omitempty"`
	RepeatedStringVal []string                `protobuf:"bytes,2,rep,name=repeated_string_val,json=repeatedStringVal,proto3" json:"repeated_string_val,omitempty"`
	NestedM1          *M1_NestedM1            `protobuf:"bytes,3,opt,name=nested_m1,json=nestedM1,proto3" json:"nested_m1,omitempty"`
	RepeatedNestedM1  []*M1_NestedM1          `protobuf:"bytes,4,rep,name=repeated_nested_m1,json=repeatedNestedM1,proto3" json:"repeated_nested_m1,omitempty"`
	String2NestedM1   map[string]*M1_NestedM1 `protobuf:"bytes,5,rep,name=string2NestedM1,proto3" json:"string2NestedM1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	String2User       map[string]*User        `protobuf:"bytes,6,rep,name=string2User,proto3" json:"string2User,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	String2String     map[string]string       `protobuf:"bytes,7,rep,name=string2string,proto3" json:"string2string,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Int2String        map[int64]string        `protobuf:"bytes,8,rep,name=int2string,proto3" json:"int2string,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	String2Int        map[string]int64        `protobuf:"bytes,9,rep,name=string2int,proto3" json:"string2int,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	String2M2         map[string]*M2          `protobuf:"bytes,10,rep,name=string2M2,proto3" json:"string2M2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Int2Enum          map[int64]M1_EnumM1     `protobuf:"bytes,11,rep,name=int2enum,proto3" json:"int2enum,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=test.proto.v1.M1_EnumM1"`
	BoolValue         bool                    `protobuf:"varint,12,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
	RepeatedBoolValue []bool                  `protobuf:"varint,13,rep,packed,name=repeated_bool_value,json=repeatedBoolValue,proto3" json:"repeated_bool_value,omitempty"`
	EnumValue         M1_EnumM1               `protobuf:"varint,14,opt,name=enum_value,json=enumValue,proto3,enum=test.proto.v1.M1_EnumM1" json:"enum_value,omitempty"`
	RepeatedEnumValue []M1_EnumM1             `protobuf:"varint,15,rep,packed,name=repeated_enum_value,json=repeatedEnumValue,proto3,enum=test.proto.v1.M1_EnumM1" json:"repeated_enum_value,omitempty"`
	Source            User_Source             `protobuf:"varint,16,opt,name=source,proto3,enum=test.proto.v1.User_Source" json:"source,omitempty"`
	User              []*User                 `protobuf:"bytes,17,rep,name=user,proto3" json:"user,omitempty"`
	RepeatedUser      []*User                 `protobuf:"bytes,18,rep,name=repeated_user,json=repeatedUser,proto3" json:"repeated_user,omitempty"`
	String2M4         map[string]*M4          `protobuf:"bytes,19,rep,name=string2M4,proto3" json:"string2M4,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are assignable to TestOneof:
	//	*M1_StringOneof
	//	*M1_NestedM1Oneof
	TestOneof     isM1_TestOneof      `protobuf_oneof:"test_oneof"`
	Any           *any.Any            `protobuf:"bytes,22,opt,name=any,proto3" json:"any,omitempty"`
	AnyMap        map[string]*any.Any `protobuf:"bytes,23,rep,name=any_map,json=anyMap,proto3" json:"any_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RepeatedOneof []*OneOf            `protobuf:"bytes,24,rep,name=repeated_oneof,json=repeatedOneof,proto3" json:"repeated_oneof,omitempty"`
}

func (x *M1) Reset() {
	*x = M1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M1) ProtoMessage() {}

func (x *M1) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M1.ProtoReflect.Descriptor instead.
func (*M1) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{1}
}

func (x *M1) GetIntVal() int32 {
	if x != nil {
		return x.IntVal
	}
	return 0
}

func (x *M1) GetRepeatedStringVal() []string {
	if x != nil {
		return x.RepeatedStringVal
	}
	return nil
}

func (x *M1) GetNestedM1() *M1_NestedM1 {
	if x != nil {
		return x.NestedM1
	}
	return nil
}

func (x *M1) GetRepeatedNestedM1() []*M1_NestedM1 {
	if x != nil {
		return x.RepeatedNestedM1
	}
	return nil
}

func (x *M1) GetString2NestedM1() map[string]*M1_NestedM1 {
	if x != nil {
		return x.String2NestedM1
	}
	return nil
}

func (x *M1) GetString2User() map[string]*User {
	if x != nil {
		return x.String2User
	}
	return nil
}

func (x *M1) GetString2String() map[string]string {
	if x != nil {
		return x.String2String
	}
	return nil
}

func (x *M1) GetInt2String() map[int64]string {
	if x != nil {
		return x.Int2String
	}
	return nil
}

func (x *M1) GetString2Int() map[string]int64 {
	if x != nil {
		return x.String2Int
	}
	return nil
}

func (x *M1) GetString2M2() map[string]*M2 {
	if x != nil {
		return x.String2M2
	}
	return nil
}

func (x *M1) GetInt2Enum() map[int64]M1_EnumM1 {
	if x != nil {
		return x.Int2Enum
	}
	return nil
}

func (x *M1) GetBoolValue() bool {
	if x != nil {
		return x.BoolValue
	}
	return false
}

func (x *M1) GetRepeatedBoolValue() []bool {
	if x != nil {
		return x.RepeatedBoolValue
	}
	return nil
}

func (x *M1) GetEnumValue() M1_EnumM1 {
	if x != nil {
		return x.EnumValue
	}
	return M1_NULL
}

func (x *M1) GetRepeatedEnumValue() []M1_EnumM1 {
	if x != nil {
		return x.RepeatedEnumValue
	}
	return nil
}

func (x *M1) GetSource() User_Source {
	if x != nil {
		return x.Source
	}
	return User_UNKNOWN
}

func (x *M1) GetUser() []*User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *M1) GetRepeatedUser() []*User {
	if x != nil {
		return x.RepeatedUser
	}
	return nil
}

func (x *M1) GetString2M4() map[string]*M4 {
	if x != nil {
		return x.String2M4
	}
	return nil
}

func (m *M1) GetTestOneof() isM1_TestOneof {
	if m != nil {
		return m.TestOneof
	}
	return nil
}

func (x *M1) GetStringOneof() string {
	if x, ok := x.GetTestOneof().(*M1_StringOneof); ok {
		return x.StringOneof
	}
	return ""
}

func (x *M1) GetNestedM1Oneof() *M1_NestedM1 {
	if x, ok := x.GetTestOneof().(*M1_NestedM1Oneof); ok {
		return x.NestedM1Oneof
	}
	return nil
}

func (x *M1) GetAny() *any.Any {
	if x != nil {
		return x.Any
	}
	return nil
}

func (x *M1) GetAnyMap() map[string]*any.Any {
	if x != nil {
		return x.AnyMap
	}
	return nil
}

func (x *M1) GetRepeatedOneof() []*OneOf {
	if x != nil {
		return x.RepeatedOneof
	}
	return nil
}

type isM1_TestOneof interface {
	isM1_TestOneof()
}

type M1_StringOneof struct {
	StringOneof string `protobuf:"bytes,20,opt,name=string_oneof,json=stringOneof,proto3,oneof"`
}

type M1_NestedM1Oneof struct {
	NestedM1Oneof *M1_NestedM1 `protobuf:"bytes,21,opt,name=nestedM1_oneof,json=nestedM1Oneof,proto3,oneof"`
}

func (*M1_StringOneof) isM1_TestOneof() {}

func (*M1_NestedM1Oneof) isM1_TestOneof() {}

type OneOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TestOneof:
	//	*OneOf_StringOneof
	//	*OneOf_FloatOneof
	TestOneof isOneOf_TestOneof `protobuf_oneof:"test_oneof"`
}

func (x *OneOf) Reset() {
	*x = OneOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneOf) ProtoMessage() {}

func (x *OneOf) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneOf.ProtoReflect.Descriptor instead.
func (*OneOf) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{2}
}

func (m *OneOf) GetTestOneof() isOneOf_TestOneof {
	if m != nil {
		return m.TestOneof
	}
	return nil
}

func (x *OneOf) GetStringOneof() string {
	if x, ok := x.GetTestOneof().(*OneOf_StringOneof); ok {
		return x.StringOneof
	}
	return ""
}

func (x *OneOf) GetFloatOneof() float32 {
	if x, ok := x.GetTestOneof().(*OneOf_FloatOneof); ok {
		return x.FloatOneof
	}
	return 0
}

type isOneOf_TestOneof interface {
	isOneOf_TestOneof()
}

type OneOf_StringOneof struct {
	StringOneof string `protobuf:"bytes,1,opt,name=string_oneof,json=stringOneof,proto3,oneof"`
}

type OneOf_FloatOneof struct {
	FloatOneof float32 `protobuf:"fixed32,2,opt,name=float_oneof,json=floatOneof,proto3,oneof"`
}

func (*OneOf_StringOneof) isOneOf_TestOneof() {}

func (*OneOf_FloatOneof) isOneOf_TestOneof() {}

type M2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	M2Id        int64          `protobuf:"varint,1,opt,name=m2_id,json=m2Id,proto3" json:"m2_id,omitempty"`
	M2Name      string         `protobuf:"bytes,2,opt,name=m2_name,json=m2Name,proto3" json:"m2_name,omitempty"`
	M2String2M2 map[string]*M3 `protobuf:"bytes,3,rep,name=m2_string2M2,json=m2String2M2,proto3" json:"m2_string2M2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *M2) Reset() {
	*x = M2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M2) ProtoMessage() {}

func (x *M2) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M2.ProtoReflect.Descriptor instead.
func (*M2) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{3}
}

func (x *M2) GetM2Id() int64 {
	if x != nil {
		return x.M2Id
	}
	return 0
}

func (x *M2) GetM2Name() string {
	if x != nil {
		return x.M2Name
	}
	return ""
}

func (x *M2) GetM2String2M2() map[string]*M3 {
	if x != nil {
		return x.M2String2M2
	}
	return nil
}

type M3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	M3Id   int64  `protobuf:"varint,1,opt,name=m3_id,json=m3Id,proto3" json:"m3_id,omitempty"`
	M3Name string `protobuf:"bytes,2,opt,name=m3_name,json=m3Name,proto3" json:"m3_name,omitempty"`
}

func (x *M3) Reset() {
	*x = M3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M3) ProtoMessage() {}

func (x *M3) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M3.ProtoReflect.Descriptor instead.
func (*M3) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{4}
}

func (x *M3) GetM3Id() int64 {
	if x != nil {
		return x.M3Id
	}
	return 0
}

func (x *M3) GetM3Name() string {
	if x != nil {
		return x.M3Name
	}
	return ""
}

type M4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RepeatedEnumValue []M1_EnumM1 `protobuf:"varint,2,rep,packed,name=repeated_enum_value,json=repeatedEnumValue,proto3,enum=test.proto.v1.M1_EnumM1" json:"repeated_enum_value,omitempty"`
	RepeatedBool      []bool      `protobuf:"varint,3,rep,packed,name=repeated_bool,json=repeatedBool,proto3" json:"repeated_bool,omitempty"`
	RepeatedDouble    []float64   `protobuf:"fixed64,4,rep,packed,name=repeated_double,json=repeatedDouble,proto3" json:"repeated_double,omitempty"`
}

func (x *M4) Reset() {
	*x = M4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M4) ProtoMessage() {}

func (x *M4) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M4.ProtoReflect.Descriptor instead.
func (*M4) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{5}
}

func (x *M4) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *M4) GetRepeatedEnumValue() []M1_EnumM1 {
	if x != nil {
		return x.RepeatedEnumValue
	}
	return nil
}

func (x *M4) GetRepeatedBool() []bool {
	if x != nil {
		return x.RepeatedBool
	}
	return nil
}

func (x *M4) GetRepeatedDouble() []float64 {
	if x != nil {
		return x.RepeatedDouble
	}
	return nil
}

type StreamMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TestStream:
	//	*StreamMessage_Header
	//	*StreamMessage_Payload
	TestStream isStreamMessage_TestStream `protobuf_oneof:"test_stream"`
}

func (x *StreamMessage) Reset() {
	*x = StreamMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMessage) ProtoMessage() {}

func (x *StreamMessage) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMessage.ProtoReflect.Descriptor instead.
func (*StreamMessage) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{6}
}

func (m *StreamMessage) GetTestStream() isStreamMessage_TestStream {
	if m != nil {
		return m.TestStream
	}
	return nil
}

func (x *StreamMessage) GetHeader() *M3 {
	if x, ok := x.GetTestStream().(*StreamMessage_Header); ok {
		return x.Header
	}
	return nil
}

func (x *StreamMessage) GetPayload() *M4 {
	if x, ok := x.GetTestStream().(*StreamMessage_Payload); ok {
		return x.Payload
	}
	return nil
}

type isStreamMessage_TestStream interface {
	isStreamMessage_TestStream()
}

type StreamMessage_Header struct {
	Header *M3 `protobuf:"bytes,1,opt,name=header,proto3,oneof"`
}

type StreamMessage_Payload struct {
	Payload *M4 `protobuf:"bytes,2,opt,name=payload,proto3,oneof"`
}

func (*StreamMessage_Header) isStreamMessage_TestStream() {}

func (*StreamMessage_Payload) isStreamMessage_TestStream() {}

type Types struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp   *timestamp.Timestamp  `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Duration    *duration.Duration    `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	DoubleValue *wrappers.DoubleValue `protobuf:"bytes,3,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	FloatValue  *wrappers.FloatValue  `protobuf:"bytes,4,opt,name=float_value,json=floatValue,proto3" json:"float_value,omitempty"`
	Int64Value  *wrappers.Int64Value  `protobuf:"bytes,5,opt,name=int64_value,json=int64Value,proto3" json:"int64_value,omitempty"`
	Uint64Value *wrappers.UInt64Value `protobuf:"bytes,6,opt,name=uint64_value,json=uint64Value,proto3" json:"uint64_value,omitempty"`
	Int32Value  *wrappers.Int32Value  `protobuf:"bytes,7,opt,name=int32_value,json=int32Value,proto3" json:"int32_value,omitempty"`
	Uint32Value *wrappers.UInt32Value `protobuf:"bytes,8,opt,name=uint32_value,json=uint32Value,proto3" json:"uint32_value,omitempty"`
	BoolValue   *wrappers.BoolValue   `protobuf:"bytes,9,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
	StringValue *wrappers.StringValue `protobuf:"bytes,10,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	BytesValue  *wrappers.BytesValue  `protobuf:"bytes,11,opt,name=bytes_value,json=bytesValue,proto3" json:"bytes_value,omitempty"`
	StructValue *_struct.Struct       `protobuf:"bytes,12,opt,name=struct_value,json=structValue,proto3" json:"struct_value,omitempty"`
}

func (x *Types) Reset() {
	*x = Types{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Types) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Types) ProtoMessage() {}

func (x *Types) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Types.ProtoReflect.Descriptor instead.
func (*Types) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{7}
}

func (x *Types) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Types) GetDuration() *duration.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Types) GetDoubleValue() *wrappers.DoubleValue {
	if x != nil {
		return x.DoubleValue
	}
	return nil
}

func (x *Types) GetFloatValue() *wrappers.FloatValue {
	if x != nil {
		return x.FloatValue
	}
	return nil
}

func (x *Types) GetInt64Value() *wrappers.Int64Value {
	if x != nil {
		return x.Int64Value
	}
	return nil
}

func (x *Types) GetUint64Value() *wrappers.UInt64Value {
	if x != nil {
		return x.Uint64Value
	}
	return nil
}

func (x *Types) GetInt32Value() *wrappers.Int32Value {
	if x != nil {
		return x.Int32Value
	}
	return nil
}

func (x *Types) GetUint32Value() *wrappers.UInt32Value {
	if x != nil {
		return x.Uint32Value
	}
	return nil
}

func (x *Types) GetBoolValue() *wrappers.BoolValue {
	if x != nil {
		return x.BoolValue
	}
	return nil
}

func (x *Types) GetStringValue() *wrappers.StringValue {
	if x != nil {
		return x.StringValue
	}
	return nil
}

func (x *Types) GetBytesValue() *wrappers.BytesValue {
	if x != nil {
		return x.BytesValue
	}
	return nil
}

func (x *Types) GetStructValue() *_struct.Struct {
	if x != nil {
		return x.StructValue
	}
	return nil
}

type Loop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Child []*Loop `protobuf:"bytes,3,rep,name=child,proto3" json:"child,omitempty"`
}

func (x *Loop) Reset() {
	*x = Loop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Loop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Loop) ProtoMessage() {}

func (x *Loop) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Loop.ProtoReflect.Descriptor instead.
func (*Loop) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{8}
}

func (x *Loop) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Loop) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Loop) GetChild() []*Loop {
	if x != nil {
		return x.Child
	}
	return nil
}

type M1_NestedM1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NId               uint64                  `protobuf:"varint,1,opt,name=n_id,json=nId,proto3" json:"n_id,omitempty"`
	NName             string                  `protobuf:"bytes,2,opt,name=n_name,json=nName,proto3" json:"n_name,omitempty"`
	RepeatedNestedM2  []*M1_NestedM1_NestedM2 `protobuf:"bytes,3,rep,name=repeatedNested_m2,json=repeatedNestedM2,proto3" json:"repeatedNested_m2,omitempty"`
	RepeatedEnumValue []M1_EnumM1             `protobuf:"varint,4,rep,packed,name=repeated_enum_value,json=repeatedEnumValue,proto3,enum=test.proto.v1.M1_EnumM1" json:"repeated_enum_value,omitempty"`
	NestedM2          *M1_NestedM1_NestedM2   `protobuf:"bytes,5,opt,name=nested_m2,json=nestedM2,proto3" json:"nested_m2,omitempty"`
	// Types that are assignable to NestedM1Oneof:
	//	*M1_NestedM1_IntOneof
	//	*M1_NestedM1_NestedM2Oneof
	NestedM1Oneof isM1_NestedM1_NestedM1Oneof `protobuf_oneof:"nestedM1_oneof"`
}

func (x *M1_NestedM1) Reset() {
	*x = M1_NestedM1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M1_NestedM1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M1_NestedM1) ProtoMessage() {}

func (x *M1_NestedM1) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M1_NestedM1.ProtoReflect.Descriptor instead.
func (*M1_NestedM1) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{1, 0}
}

func (x *M1_NestedM1) GetNId() uint64 {
	if x != nil {
		return x.NId
	}
	return 0
}

func (x *M1_NestedM1) GetNName() string {
	if x != nil {
		return x.NName
	}
	return ""
}

func (x *M1_NestedM1) GetRepeatedNestedM2() []*M1_NestedM1_NestedM2 {
	if x != nil {
		return x.RepeatedNestedM2
	}
	return nil
}

func (x *M1_NestedM1) GetRepeatedEnumValue() []M1_EnumM1 {
	if x != nil {
		return x.RepeatedEnumValue
	}
	return nil
}

func (x *M1_NestedM1) GetNestedM2() *M1_NestedM1_NestedM2 {
	if x != nil {
		return x.NestedM2
	}
	return nil
}

func (m *M1_NestedM1) GetNestedM1Oneof() isM1_NestedM1_NestedM1Oneof {
	if m != nil {
		return m.NestedM1Oneof
	}
	return nil
}

func (x *M1_NestedM1) GetIntOneof() int32 {
	if x, ok := x.GetNestedM1Oneof().(*M1_NestedM1_IntOneof); ok {
		return x.IntOneof
	}
	return 0
}

func (x *M1_NestedM1) GetNestedM2Oneof() *M1_NestedM1_NestedM2 {
	if x, ok := x.GetNestedM1Oneof().(*M1_NestedM1_NestedM2Oneof); ok {
		return x.NestedM2Oneof
	}
	return nil
}

type isM1_NestedM1_NestedM1Oneof interface {
	isM1_NestedM1_NestedM1Oneof()
}

type M1_NestedM1_IntOneof struct {
	IntOneof int32 `protobuf:"varint,6,opt,name=int_oneof,json=intOneof,proto3,oneof"`
}

type M1_NestedM1_NestedM2Oneof struct {
	NestedM2Oneof *M1_NestedM1_NestedM2 `protobuf:"bytes,7,opt,name=nestedM2_oneof,json=nestedM2Oneof,proto3,oneof"`
}

func (*M1_NestedM1_IntOneof) isM1_NestedM1_NestedM1Oneof() {}

func (*M1_NestedM1_NestedM2Oneof) isM1_NestedM1_NestedM1Oneof() {}

type M1_NestedM1_NestedM2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	N2Id   uint64 `protobuf:"varint,1,opt,name=n2_id,json=n2Id,proto3" json:"n2_id,omitempty"`
	N2Name string `protobuf:"bytes,2,opt,name=n2_name,json=n2Name,proto3" json:"n2_name,omitempty"`
}

func (x *M1_NestedM1_NestedM2) Reset() {
	*x = M1_NestedM1_NestedM2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M1_NestedM1_NestedM2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M1_NestedM1_NestedM2) ProtoMessage() {}

func (x *M1_NestedM1_NestedM2) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M1_NestedM1_NestedM2.ProtoReflect.Descriptor instead.
func (*M1_NestedM1_NestedM2) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *M1_NestedM1_NestedM2) GetN2Id() uint64 {
	if x != nil {
		return x.N2Id
	}
	return 0
}

func (x *M1_NestedM1_NestedM2) GetN2Name() string {
	if x != nil {
		return x.N2Name
	}
	return ""
}

var File_test_proto protoreflect.FileDescriptor

var file_test_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x02, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67,
	0x12, 0x60, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x4d, 0x32, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x12,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e,
	0x75, 0x6d, 0x22, 0x3c, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x31, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x32, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x33, 0x10, 0x03,
	0x22, 0xd0, 0x14, 0x0a, 0x02, 0x4d, 0x31, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x12, 0x37, 0x0a, 0x09, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x31, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x31, 0x52,
	0x08, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x31, 0x12, 0x48, 0x0a, 0x12, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x31, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d,
	0x31, 0x52, 0x10, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x4d, 0x31, 0x12, 0x50, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x4d, 0x31, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x31, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x4d, 0x31, 0x12, 0x44, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x32, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x55, 0x73, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0d, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x32, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x32, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x31, 0x2e, 0x49,
	0x6e, 0x74, 0x32, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x69, 0x6e, 0x74, 0x32, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x0a, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x32, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x69, 0x6e, 0x74, 0x12, 0x3e, 0x0a,
	0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x4d, 0x32, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x4d, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x4d, 0x32, 0x12, 0x3b, 0x0a,
	0x08, 0x69, 0x6e, 0x74, 0x32, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x32, 0x65, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x32, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f,
	0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x65, 0x6e, 0x75,
	0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x31,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4d, 0x31, 0x52, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x48, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65,
	0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4d, 0x31, 0x52, 0x11, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x27, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0d, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x4d, 0x34,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x32, 0x4d, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x32, 0x4d, 0x34, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x12, 0x43, 0x0a, 0x0e, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x4d, 0x31, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x31, 0x48, 0x00, 0x52, 0x0d,
	0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x31, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x12, 0x26, 0x0a,
	0x03, 0x61, 0x6e, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x6e, 0x79, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x31, 0x2e, 0x41, 0x6e, 0x79, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x61, 0x6e, 0x79, 0x4d, 0x61, 0x70, 0x12, 0x3b, 0x0a,
	0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x18,
	0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x52, 0x0d, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x1a, 0xee, 0x03, 0x0a, 0x08, 0x4e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x31, 0x12, 0x11, 0x0a, 0x04, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x50, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x6d, 0x32, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x31, 0x2e,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d,
	0x32, 0x52, 0x10, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x4d, 0x32, 0x12, 0x48, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4d, 0x31, 0x52, 0x11, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a,
	0x09, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x31, 0x2e, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x4d, 0x32, 0x52, 0x08, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x32, 0x12,
	0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x12, 0x4c,
	0x0a, 0x0e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x32, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x4d, 0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x32, 0x48, 0x00, 0x52, 0x0d, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x32, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x1a, 0x5b, 0x0a, 0x08,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x32, 0x12, 0x13, 0x0a, 0x05, 0x6e, 0x32, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6e, 0x32, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x32, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x32, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x21, 0x0a, 0x0a, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x05, 0x0a, 0x01, 0x41, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x42,
	0x10, 0x01, 0x12, 0x05, 0x0a, 0x01, 0x43, 0x10, 0x02, 0x42, 0x10, 0x0a, 0x0e, 0x6e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x4d, 0x31, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x1a, 0x5e, 0x0a, 0x14, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x31, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x31,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x10, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x40, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x32, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x69, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x4f, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x4d, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x32, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x55, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x32, 0x65, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4d, 0x31, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x32, 0x4d, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x34, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a, 0x0b, 0x41, 0x6e, 0x79,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x29, 0x0a, 0x06, 0x45, 0x6e,
	0x75, 0x6d, 0x4d, 0x31, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x43,
	0x4f, 0x4e, 0x44, 0x10, 0x02, 0x42, 0x0c, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x22, 0x5d, 0x0a, 0x05, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x12, 0x23, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x65, 0x6f,
	0x66, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x4f,
	0x6e, 0x65, 0x6f, 0x66, 0x42, 0x0c, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x22, 0xcc, 0x01, 0x0a, 0x02, 0x4d, 0x32, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x32, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x32, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x6d, 0x32, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x32, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x6d, 0x32, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x32, 0x4d, 0x32, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x32,
	0x2e, 0x4d, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x4d, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x6d, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x4d, 0x32, 0x1a, 0x51,
	0x0a, 0x10, 0x4d, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x4d, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x33, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x32, 0x0a, 0x02, 0x4d, 0x33, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x33, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x33, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x6d, 0x33, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x33, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x02, 0x4d, 0x34, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x48, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x31,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4d, 0x31, 0x52, 0x11, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x08, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x22, 0x7a, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x33, 0x48, 0x00, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x34, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x22, 0xeb, 0x05, 0x0a, 0x05, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3f, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x3c, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c,
	0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x0c,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a,
	0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x62, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x55, 0x0a, 0x04, 0x4c, 0x6f, 0x6f, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29,
	0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x6f, 0x70, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x32, 0x9c, 0x03, 0x0a, 0x0a, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2d, 0x0a, 0x05, 0x55, 0x6e, 0x61, 0x72,
	0x79, 0x12, 0x11, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x31, 0x1a, 0x11, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x31, 0x12, 0x4c, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x28, 0x01, 0x12, 0x4c, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x1c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x30, 0x01, 0x12, 0x54, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x37, 0x0a, 0x09, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x54, 0x65, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x14, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x4c, 0x6f, 0x6f, 0x70, 0x54, 0x65, 0x73, 0x74, 0x12, 0x13,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x6f, 0x70, 0x1a, 0x13, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x6f, 0x70, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x3b, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_test_proto_rawDescOnce sync.Once
	file_test_proto_rawDescData = file_test_proto_rawDesc
)

func file_test_proto_rawDescGZIP() []byte {
	file_test_proto_rawDescOnce.Do(func() {
		file_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_proto_rawDescData)
	})
	return file_test_proto_rawDescData
}

var file_test_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_test_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_test_proto_goTypes = []interface{}{
	(User_Source)(0),                     // 0: test.proto.v1.User.Source
	(M1_EnumM1)(0),                       // 1: test.proto.v1.M1.EnumM1
	(M1_NestedM1_NestedM2_NestedEnum)(0), // 2: test.proto.v1.M1.NestedM1.NestedM2.NestedEnum
	(*User)(nil),                         // 3: test.proto.v1.User
	(*M1)(nil),                           // 4: test.proto.v1.M1
	(*OneOf)(nil),                        // 5: test.proto.v1.OneOf
	(*M2)(nil),                           // 6: test.proto.v1.M2
	(*M3)(nil),                           // 7: test.proto.v1.M3
	(*M4)(nil),                           // 8: test.proto.v1.M4
	(*StreamMessage)(nil),                // 9: test.proto.v1.StreamMessage
	(*Types)(nil),                        // 10: test.proto.v1.Types
	(*Loop)(nil),                         // 11: test.proto.v1.Loop
	(*M1_NestedM1)(nil),                  // 12: test.proto.v1.M1.NestedM1
	nil,                                  // 13: test.proto.v1.M1.String2NestedM1Entry
	nil,                                  // 14: test.proto.v1.M1.String2UserEntry
	nil,                                  // 15: test.proto.v1.M1.String2stringEntry
	nil,                                  // 16: test.proto.v1.M1.Int2stringEntry
	nil,                                  // 17: test.proto.v1.M1.String2intEntry
	nil,                                  // 18: test.proto.v1.M1.String2M2Entry
	nil,                                  // 19: test.proto.v1.M1.Int2enumEntry
	nil,                                  // 20: test.proto.v1.M1.String2M4Entry
	nil,                                  // 21: test.proto.v1.M1.AnyMapEntry
	(*M1_NestedM1_NestedM2)(nil),         // 22: test.proto.v1.M1.NestedM1.NestedM2
	nil,                                  // 23: test.proto.v1.M2.M2String2M2Entry
	(*any.Any)(nil),                      // 24: google.protobuf.Any
	(*timestamp.Timestamp)(nil),          // 25: google.protobuf.Timestamp
	(*duration.Duration)(nil),            // 26: google.protobuf.Duration
	(*wrappers.DoubleValue)(nil),         // 27: google.protobuf.DoubleValue
	(*wrappers.FloatValue)(nil),          // 28: google.protobuf.FloatValue
	(*wrappers.Int64Value)(nil),          // 29: google.protobuf.Int64Value
	(*wrappers.UInt64Value)(nil),         // 30: google.protobuf.UInt64Value
	(*wrappers.Int32Value)(nil),          // 31: google.protobuf.Int32Value
	(*wrappers.UInt32Value)(nil),         // 32: google.protobuf.UInt32Value
	(*wrappers.BoolValue)(nil),           // 33: google.protobuf.BoolValue
	(*wrappers.StringValue)(nil),         // 34: google.protobuf.StringValue
	(*wrappers.BytesValue)(nil),          // 35: google.protobuf.BytesValue
	(*_struct.Struct)(nil),               // 36: google.protobuf.Struct
}
var file_test_proto_depIdxs = []int32{
	2,  // 0: test.proto.v1.User.repeated_nested_enum:type_name -> test.proto.v1.M1.NestedM1.NestedM2.NestedEnum
	12, // 1: test.proto.v1.M1.nested_m1:type_name -> test.proto.v1.M1.NestedM1
	12, // 2: test.proto.v1.M1.repeated_nested_m1:type_name -> test.proto.v1.M1.NestedM1
	13, // 3: test.proto.v1.M1.string2NestedM1:type_name -> test.proto.v1.M1.String2NestedM1Entry
	14, // 4: test.proto.v1.M1.string2User:type_name -> test.proto.v1.M1.String2UserEntry
	15, // 5: test.proto.v1.M1.string2string:type_name -> test.proto.v1.M1.String2stringEntry
	16, // 6: test.proto.v1.M1.int2string:type_name -> test.proto.v1.M1.Int2stringEntry
	17, // 7: test.proto.v1.M1.string2int:type_name -> test.proto.v1.M1.String2intEntry
	18, // 8: test.proto.v1.M1.string2M2:type_name -> test.proto.v1.M1.String2M2Entry
	19, // 9: test.proto.v1.M1.int2enum:type_name -> test.proto.v1.M1.Int2enumEntry
	1,  // 10: test.proto.v1.M1.enum_value:type_name -> test.proto.v1.M1.EnumM1
	1,  // 11: test.proto.v1.M1.repeated_enum_value:type_name -> test.proto.v1.M1.EnumM1
	0,  // 12: test.proto.v1.M1.source:type_name -> test.proto.v1.User.Source
	3,  // 13: test.proto.v1.M1.user:type_name -> test.proto.v1.User
	3,  // 14: test.proto.v1.M1.repeated_user:type_name -> test.proto.v1.User
	20, // 15: test.proto.v1.M1.string2M4:type_name -> test.proto.v1.M1.String2M4Entry
	12, // 16: test.proto.v1.M1.nestedM1_oneof:type_name -> test.proto.v1.M1.NestedM1
	24, // 17: test.proto.v1.M1.any:type_name -> google.protobuf.Any
	21, // 18: test.proto.v1.M1.any_map:type_name -> test.proto.v1.M1.AnyMapEntry
	5,  // 19: test.proto.v1.M1.repeated_oneof:type_name -> test.proto.v1.OneOf
	23, // 20: test.proto.v1.M2.m2_string2M2:type_name -> test.proto.v1.M2.M2String2M2Entry
	1,  // 21: test.proto.v1.M4.repeated_enum_value:type_name -> test.proto.v1.M1.EnumM1
	7,  // 22: test.proto.v1.StreamMessage.header:type_name -> test.proto.v1.M3
	8,  // 23: test.proto.v1.StreamMessage.payload:type_name -> test.proto.v1.M4
	25, // 24: test.proto.v1.Types.timestamp:type_name -> google.protobuf.Timestamp
	26, // 25: test.proto.v1.Types.duration:type_name -> google.protobuf.Duration
	27, // 26: test.proto.v1.Types.double_value:type_name -> google.protobuf.DoubleValue
	28, // 27: test.proto.v1.Types.float_value:type_name -> google.protobuf.FloatValue
	29, // 28: test.proto.v1.Types.int64_value:type_name -> google.protobuf.Int64Value
	30, // 29: test.proto.v1.Types.uint64_value:type_name -> google.protobuf.UInt64Value
	31, // 30: test.proto.v1.Types.int32_value:type_name -> google.protobuf.Int32Value
	32, // 31: test.proto.v1.Types.uint32_value:type_name -> google.protobuf.UInt32Value
	33, // 32: test.proto.v1.Types.bool_value:type_name -> google.protobuf.BoolValue
	34, // 33: test.proto.v1.Types.string_value:type_name -> google.protobuf.StringValue
	35, // 34: test.proto.v1.Types.bytes_value:type_name -> google.protobuf.BytesValue
	36, // 35: test.proto.v1.Types.struct_value:type_name -> google.protobuf.Struct
	11, // 36: test.proto.v1.Loop.child:type_name -> test.proto.v1.Loop
	22, // 37: test.proto.v1.M1.NestedM1.repeatedNested_m2:type_name -> test.proto.v1.M1.NestedM1.NestedM2
	1,  // 38: test.proto.v1.M1.NestedM1.repeated_enum_value:type_name -> test.proto.v1.M1.EnumM1
	22, // 39: test.proto.v1.M1.NestedM1.nested_m2:type_name -> test.proto.v1.M1.NestedM1.NestedM2
	22, // 40: test.proto.v1.M1.NestedM1.nestedM2_oneof:type_name -> test.proto.v1.M1.NestedM1.NestedM2
	12, // 41: test.proto.v1.M1.String2NestedM1Entry.value:type_name -> test.proto.v1.M1.NestedM1
	3,  // 42: test.proto.v1.M1.String2UserEntry.value:type_name -> test.proto.v1.User
	6,  // 43: test.proto.v1.M1.String2M2Entry.value:type_name -> test.proto.v1.M2
	1,  // 44: test.proto.v1.M1.Int2enumEntry.value:type_name -> test.proto.v1.M1.EnumM1
	8,  // 45: test.proto.v1.M1.String2M4Entry.value:type_name -> test.proto.v1.M4
	24, // 46: test.proto.v1.M1.AnyMapEntry.value:type_name -> google.protobuf.Any
	7,  // 47: test.proto.v1.M2.M2String2M2Entry.value:type_name -> test.proto.v1.M3
	4,  // 48: test.proto.v1.test_proto.Unary:input_type -> test.proto.v1.M1
	9,  // 49: test.proto.v1.test_proto.ClientStream:input_type -> test.proto.v1.StreamMessage
	9,  // 50: test.proto.v1.test_proto.ServerStream:input_type -> test.proto.v1.StreamMessage
	9,  // 51: test.proto.v1.test_proto.ClientServerStream:input_type -> test.proto.v1.StreamMessage
	10, // 52: test.proto.v1.test_proto.TypesTest:input_type -> test.proto.v1.Types
	11, // 53: test.proto.v1.test_proto.LoopTest:input_type -> test.proto.v1.Loop
	4,  // 54: test.proto.v1.test_proto.Unary:output_type -> test.proto.v1.M1
	9,  // 55: test.proto.v1.test_proto.ClientStream:output_type -> test.proto.v1.StreamMessage
	9,  // 56: test.proto.v1.test_proto.ServerStream:output_type -> test.proto.v1.StreamMessage
	9,  // 57: test.proto.v1.test_proto.ClientServerStream:output_type -> test.proto.v1.StreamMessage
	10, // 58: test.proto.v1.test_proto.TypesTest:output_type -> test.proto.v1.Types
	11, // 59: test.proto.v1.test_proto.LoopTest:output_type -> test.proto.v1.Loop
	54, // [54:60] is the sub-list for method output_type
	48, // [48:54] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_test_proto_init() }
func file_test_proto_init() {
	if File_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Types); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Loop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M1_NestedM1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M1_NestedM1_NestedM2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_test_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*M1_StringOneof)(nil),
		(*M1_NestedM1Oneof)(nil),
	}
	file_test_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*OneOf_StringOneof)(nil),
		(*OneOf_FloatOneof)(nil),
	}
	file_test_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*StreamMessage_Header)(nil),
		(*StreamMessage_Payload)(nil),
	}
	file_test_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*M1_NestedM1_IntOneof)(nil),
		(*M1_NestedM1_NestedM2Oneof)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_test_proto_goTypes,
		DependencyIndexes: file_test_proto_depIdxs,
		EnumInfos:         file_test_proto_enumTypes,
		MessageInfos:      file_test_proto_msgTypes,
	}.Build()
	File_test_proto = out.File
	file_test_proto_rawDesc = nil
	file_test_proto_goTypes = nil
	file_test_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TestProtoClient is the client API for TestProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestProtoClient interface {
	Unary(ctx context.Context, in *M1, opts ...grpc.CallOption) (*M1, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (TestProto_ClientStreamClient, error)
	ServerStream(ctx context.Context, in *StreamMessage, opts ...grpc.CallOption) (TestProto_ServerStreamClient, error)
	ClientServerStream(ctx context.Context, opts ...grpc.CallOption) (TestProto_ClientServerStreamClient, error)
	TypesTest(ctx context.Context, in *Types, opts ...grpc.CallOption) (*Types, error)
	LoopTest(ctx context.Context, in *Loop, opts ...grpc.CallOption) (*Loop, error)
}

type testProtoClient struct {
	cc grpc.ClientConnInterface
}

func NewTestProtoClient(cc grpc.ClientConnInterface) TestProtoClient {
	return &testProtoClient{cc}
}

func (c *testProtoClient) Unary(ctx context.Context, in *M1, opts ...grpc.CallOption) (*M1, error) {
	out := new(M1)
	err := c.cc.Invoke(ctx, "/test.proto.v1.test_proto/Unary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testProtoClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (TestProto_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestProto_serviceDesc.Streams[0], "/test.proto.v1.test_proto/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testProtoClientStreamClient{stream}
	return x, nil
}

type TestProto_ClientStreamClient interface {
	Send(*StreamMessage) error
	CloseAndRecv() (*StreamMessage, error)
	grpc.ClientStream
}

type testProtoClientStreamClient struct {
	grpc.ClientStream
}

func (x *testProtoClientStreamClient) Send(m *StreamMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testProtoClientStreamClient) CloseAndRecv() (*StreamMessage, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testProtoClient) ServerStream(ctx context.Context, in *StreamMessage, opts ...grpc.CallOption) (TestProto_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestProto_serviceDesc.Streams[1], "/test.proto.v1.test_proto/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testProtoServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestProto_ServerStreamClient interface {
	Recv() (*StreamMessage, error)
	grpc.ClientStream
}

type testProtoServerStreamClient struct {
	grpc.ClientStream
}

func (x *testProtoServerStreamClient) Recv() (*StreamMessage, error) {
	m := new(StreamMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testProtoClient) ClientServerStream(ctx context.Context, opts ...grpc.CallOption) (TestProto_ClientServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestProto_serviceDesc.Streams[2], "/test.proto.v1.test_proto/ClientServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testProtoClientServerStreamClient{stream}
	return x, nil
}

type TestProto_ClientServerStreamClient interface {
	Send(*StreamMessage) error
	Recv() (*StreamMessage, error)
	grpc.ClientStream
}

type testProtoClientServerStreamClient struct {
	grpc.ClientStream
}

func (x *testProtoClientServerStreamClient) Send(m *StreamMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testProtoClientServerStreamClient) Recv() (*StreamMessage, error) {
	m := new(StreamMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testProtoClient) TypesTest(ctx context.Context, in *Types, opts ...grpc.CallOption) (*Types, error) {
	out := new(Types)
	err := c.cc.Invoke(ctx, "/test.proto.v1.test_proto/TypesTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testProtoClient) LoopTest(ctx context.Context, in *Loop, opts ...grpc.CallOption) (*Loop, error) {
	out := new(Loop)
	err := c.cc.Invoke(ctx, "/test.proto.v1.test_proto/LoopTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestProtoServer is the server API for TestProto service.
type TestProtoServer interface {
	Unary(context.Context, *M1) (*M1, error)
	ClientStream(TestProto_ClientStreamServer) error
	ServerStream(*StreamMessage, TestProto_ServerStreamServer) error
	ClientServerStream(TestProto_ClientServerStreamServer) error
	TypesTest(context.Context, *Types) (*Types, error)
	LoopTest(context.Context, *Loop) (*Loop, error)
}

// UnimplementedTestProtoServer can be embedded to have forward compatible implementations.
type UnimplementedTestProtoServer struct {
}

func (*UnimplementedTestProtoServer) Unary(context.Context, *M1) (*M1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary not implemented")
}
func (*UnimplementedTestProtoServer) ClientStream(TestProto_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (*UnimplementedTestProtoServer) ServerStream(*StreamMessage, TestProto_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (*UnimplementedTestProtoServer) ClientServerStream(TestProto_ClientServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientServerStream not implemented")
}
func (*UnimplementedTestProtoServer) TypesTest(context.Context, *Types) (*Types, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TypesTest not implemented")
}
func (*UnimplementedTestProtoServer) LoopTest(context.Context, *Loop) (*Loop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoopTest not implemented")
}

func RegisterTestProtoServer(s *grpc.Server, srv TestProtoServer) {
	s.RegisterService(&_TestProto_serviceDesc, srv)
}

func _TestProto_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(M1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestProtoServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.proto.v1.test_proto/Unary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestProtoServer).Unary(ctx, req.(*M1))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestProto_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestProtoServer).ClientStream(&testProtoClientStreamServer{stream})
}

type TestProto_ClientStreamServer interface {
	SendAndClose(*StreamMessage) error
	Recv() (*StreamMessage, error)
	grpc.ServerStream
}

type testProtoClientStreamServer struct {
	grpc.ServerStream
}

func (x *testProtoClientStreamServer) SendAndClose(m *StreamMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testProtoClientStreamServer) Recv() (*StreamMessage, error) {
	m := new(StreamMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestProto_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestProtoServer).ServerStream(m, &testProtoServerStreamServer{stream})
}

type TestProto_ServerStreamServer interface {
	Send(*StreamMessage) error
	grpc.ServerStream
}

type testProtoServerStreamServer struct {
	grpc.ServerStream
}

func (x *testProtoServerStreamServer) Send(m *StreamMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _TestProto_ClientServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestProtoServer).ClientServerStream(&testProtoClientServerStreamServer{stream})
}

type TestProto_ClientServerStreamServer interface {
	Send(*StreamMessage) error
	Recv() (*StreamMessage, error)
	grpc.ServerStream
}

type testProtoClientServerStreamServer struct {
	grpc.ServerStream
}

func (x *testProtoClientServerStreamServer) Send(m *StreamMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testProtoClientServerStreamServer) Recv() (*StreamMessage, error) {
	m := new(StreamMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestProto_TypesTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Types)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestProtoServer).TypesTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.proto.v1.test_proto/TypesTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestProtoServer).TypesTest(ctx, req.(*Types))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestProto_LoopTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Loop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestProtoServer).LoopTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.proto.v1.test_proto/LoopTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestProtoServer).LoopTest(ctx, req.(*Loop))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestProto_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test.proto.v1.test_proto",
	HandlerType: (*TestProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _TestProto_Unary_Handler,
		},
		{
			MethodName: "TypesTest",
			Handler:    _TestProto_TypesTest_Handler,
		},
		{
			MethodName: "LoopTest",
			Handler:    _TestProto_LoopTest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _TestProto_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _TestProto_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientServerStream",
			Handler:       _TestProto_ClientServerStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "test.proto",
}
