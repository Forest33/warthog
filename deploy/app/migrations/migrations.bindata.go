// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/1633685677_init.down.sql (32B)
// migrations/1633685677_init.up.sql (1.187kB)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations1633685677_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x2f\xcd\x8c\x4f\xce\xcf\x4b\xcb\x4c\xb7\x06\x04\x00\x00\xff\xff\x49\xa7\x32\xcb\x20\x00\x00\x00")

func migrations1633685677_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1633685677_initDownSql,
		"migrations/1633685677_init.down.sql",
	)
}

func migrations1633685677_initDownSql() (*asset, error) {
	bytes, err := migrations1633685677_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1633685677_init.down.sql", size: 32, mode: os.FileMode(0664), modTime: time.Unix(1665214714, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe8, 0x16, 0x49, 0x52, 0xa1, 0x76, 0xbe, 0xd5, 0x80, 0x60, 0xe1, 0x4e, 0x86, 0x4b, 0xe4, 0xc, 0x6c, 0x14, 0x63, 0x58, 0x6a, 0x87, 0x3d, 0xd3, 0x42, 0xf3, 0xb0, 0xfe, 0x20, 0x2, 0x6f, 0x87}}
	return a, nil
}

var _migrations1633685677_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\x41\x6f\xb2\x40\x10\xbd\xf3\x2b\xe6\x06\x24\x1e\xfc\xbe\xd4\xb6\x89\xa7\xd5\xae\x2d\x11\xc1\xc0\xda\xd4\x13\xd9\xb0\xab\x6c\x4a\x81\xc0\x1a\xf4\xdf\x37\x0b\x82\xd0\x26\xb4\x8d\xed\x1c\x08\xcc\xce\x7b\xc3\xbc\x37\x3b\xf7\x30\x22\x18\x08\x9a\xd9\x18\xf6\x07\x11\x84\x69\xb2\x13\x7b\xcd\xd0\x00\x00\x4a\x91\xb0\xb4\x0c\x4a\xc1\x64\x04\x60\x39\x04\x1c\x97\x80\xb3\xb1\x6d\xa8\xe3\x01\x2f\xd0\xc6\x26\xf0\x6f\xfc\xff\x66\xd4\x85\x44\x5c\xec\x23\x39\x04\xb9\xbb\xbd\xef\x21\x8e\xf5\xf1\x00\x62\x32\xee\x01\x4e\xdf\x06\x84\x39\xa7\x92\xb3\x80\xca\xea\x14\x11\x4c\xac\x15\x6e\xcb\x0c\x46\x25\x97\xe2\x8d\x1b\x7a\x92\x96\xfa\x08\xf4\x38\x0d\x69\xac\x32\xba\x69\xb6\xe4\x35\xd7\x21\x63\xbf\xc0\xa5\x99\x53\x4d\xb3\x1c\x1f\x7b\x44\x0d\xe0\x76\xa4\x07\xa3\xab\xfa\xa8\x2f\x68\xfb\x79\x6c\xdf\x4e\xa6\xf6\x8c\xec\x0d\xf6\xc1\xa8\x5c\xa8\x84\x55\xa3\xc3\x64\xac\xba\xf4\x1c\x2e\xd3\xfc\xb5\xc8\x68\xc8\xcf\x06\x0b\x06\x4d\x58\x0e\xc1\x8f\xd8\x83\xb5\x67\xad\x90\xb7\x85\x25\xde\xd6\x13\x67\x34\xe7\x89\x0c\x54\x69\x53\x33\x18\x17\xad\x22\x5a\x04\x61\x24\x62\x06\x30\x73\x5d\x7b\x18\xa6\x90\x8d\x8d\x8d\x9a\x0b\x64\xfb\xb8\xe6\x92\xa7\x8c\x9f\xcb\x08\x7e\x21\x30\x7f\xc2\xf3\x25\x18\x55\xda\x72\xc0\xd0\x77\x4a\xec\x42\x3d\xf2\xcf\xae\x49\x21\x63\x7e\x41\xd7\x49\x46\x25\xed\x52\x7e\xf9\x7b\x2d\x5d\x91\xe6\xf2\x83\x6c\x3f\x1b\xec\xbc\x98\xfc\x98\xd1\x84\x71\x65\xc2\xd5\x02\x75\x96\x5c\x6d\xa4\x4f\xd0\x6a\x7d\xd9\xcf\x81\xb8\xf6\x1a\xfc\x69\x37\xcd\x9c\xbe\x07\x00\x00\xff\xff\xc7\x60\xe0\xb9\xa3\x04\x00\x00")

func migrations1633685677_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1633685677_initUpSql,
		"migrations/1633685677_init.up.sql",
	)
}

func migrations1633685677_initUpSql() (*asset, error) {
	bytes, err := migrations1633685677_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1633685677_init.up.sql", size: 1187, mode: os.FileMode(0664), modTime: time.Unix(1668361783, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x74, 0x69, 0xac, 0x8d, 0x35, 0x3f, 0x4c, 0x4d, 0x24, 0xb3, 0x85, 0xb8, 0xec, 0xa7, 0x8f, 0x46, 0xc0, 0xca, 0xd1, 0xf9, 0xd9, 0xcd, 0x5c, 0x3, 0x4a, 0x76, 0xc9, 0xe8, 0x64, 0xa1, 0x89, 0xea}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/1633685677_init.down.sql": migrations1633685677_initDownSql,
	"migrations/1633685677_init.up.sql":   migrations1633685677_initUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": {nil, map[string]*bintree{
		"1633685677_init.down.sql": {migrations1633685677_initDownSql, map[string]*bintree{}},
		"1633685677_init.up.sql":   {migrations1633685677_initUpSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
